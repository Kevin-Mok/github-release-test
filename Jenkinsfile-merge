/* @Library('jenkins-pipeline-shared-libraries-kmok')_ */
@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]

pipeline {
    agent {
        label 'kie-rhel7-priority'
    }
    environment {
        PROPERTIES_FILE_NAME = "deployment.properties"
        BOT_CREDS = "kmok-github-bot"
    }
    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        string(name: 'DEPLOY_BUILD_URL', defaultValue: 'https://rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/custom/job/kmok/job/KOGITO-2375-props/lastSuccessfulBuild/', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Override `deployment.properties`. Which branch to build? Set if you are not on a multibranch pipeline.')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')
        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from PROJECT_VERSION')
    }
    stages {
        stage('Initialization') {
            steps {
                script {
                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }
                    if (getGitTag() != ""){
                        assert getBuildBranch() != ''
                    }
                }
            }
        }
        stage('Merge PR') {
            when {
                expression {
                    return isRelease() && 
                           getDeployProperty('kogito-runtimes.pr.link') != '' && 
                           getDeployProperty('kogito-apps.pr.link') != '' && 
                           getDeployProperty('kogito-examples.pr.link') != ''
                }
            }
            steps {
                dir("kogito-runtimes") {
                    cloneAndMerge("jenkins-test")
                }
                /* dir("kogito-apps") {
                    cloneAndMerge("kogito-apps")
                }
                dir("kogito-examples") {
                    cloneAndMerge("kogito-examples")
                } */
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    if (params.DEPLOY_BUILD_URL != ''){
        sh "wget ${params.DEPLOY_BUILD_URL}artifact/${PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join("\n")
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ""
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ""){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty("release") == "true")
}

String getProjectVersion() {
    return getParamOrDeployProperty("PROJECT_VERSION", "project.version")
}

String getSnapshotVersion() {
    return util.getNextSnapshot(getProjectVersion())
}

String getGitTag() {
    return params.GIT_TAG != "" ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return getParamOrDeployProperty("BUILD_BRANCH_NAME", "git.branch")
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////
void cloneAndMerge(String repo) {
    checkout(githubscm.resolveRepository(repo, "Kevin-Mok-Bot", getBuildBranch(), false))
    sh '''
    git log -3
    git checkout master
    git branch
    '''
    githubscm.mergePR(getDeployProperty("${repo}.pr.link"), BOT_CREDS)
    sh "git log -3"
    /* githubscm.pushObject("origin", getBuildBranch(), BOT_CREDS) */
}

void tagLatest(String repo) {
    githubscm.tagRepository(env.GIT_COMMITTER_NAME, env.GIT_COMMITTER_EMAIL, getGitTag(), BUILD_TAG)
    githubscm.pushObject("origin", getGitTag(), BOT_CREDS)
}
