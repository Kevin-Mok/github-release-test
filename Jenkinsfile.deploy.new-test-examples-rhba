@Library('jenkins-pipeline-shared-libraries-kmok')_

pipeline {
    agent {label 'kogito-cloud && !master'}
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: true, description: 'Is this build for a release?')
        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')
    }
    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
        NEW_BRANCH = "${JOB_BASE_NAME}-${BUILD_NUMBER}"
        GIT_USER = "Jenkins CI"
        GIT_USER_EMAIL = "jenkins@rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com"
        COMMIT_MSG = "Update Maven version for release"
        CREDENTIALS_ID = "kmok-github-bot"
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    stages {
        stage('Clone repositories') { 
            steps {
                dir("kogito-examples") {
                    checkout(githubscm.resolveRepository("kogito-examples", "Kevin-Mok-Bot", "master", false))
                }
            }
        }
        stage('Prepare Maven settings'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
                    sh "echo '-B -s $MAVEN_SETTINGS_FILE' | tee kogito-examples/.mvn/maven.config"
                }
                dir("kogito-examples") {
                    script {
                        maven.updateMavenVersion(params.MAVEN_VERSION)
                    }
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Deploy artifacts') {
            steps {
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
            }
        }
        stage('Create PR'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                dir("kogito-examples") {
                    script {
                        githubscm.createBranch("${NEW_BRANCH}")
                        githubscm.commitChanges("${GIT_USER}", "${GIT_USER_EMAIL}", "${COMMIT_MSG}")
                        githubscm.pushObject("origin", "${NEW_BRANCH}", "${CREDENTIALS_ID}")
                        githubscm.createPR("${COMMIT_MSG}", "master", "${CREDENTIALS_ID}")
                    }
                }
            }
        }
        stage('Archive staging repository URL') {
            steps {
                script {
                    if (params.RELEASE) {
                        def STAGING_REPO_URL = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                        def PROPERTIES_FILE = "deployment.properties"
                        sh "printf \"staging-repo.url=%s\" \"${STAGING_REPO_URL}\" > ${PROPERTIES_FILE}"
                        archiveArtifacts(artifacts: "${PROPERTIES_FILE}")
                    }
                }
            }
        }
    }
    post {
        always {
            junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
        }
    }
}
