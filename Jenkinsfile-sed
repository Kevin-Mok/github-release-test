@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]
BOT_CREDENTIALS_ID = "kmok-github-bot"

pipeline {
    agent { label 'kie-rhel7-priority' }
    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')
    }
    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (env.BRANCH_NAME != "") {
                        // Switch to branch if not on a multibranch pipeline
                        env.BRANCH_NAME = getBuildBranch()
                    }
                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }
                    setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                    setDeployPropertyIfNeeded('project.version', getProjectVersion())
                    setDeployPropertyIfNeeded('release', isRelease())
                }
            }
        }
        stage('Clone repositories') { 
            steps {
                dir("kogito-runtimes") {
                    checkout(githubscm.resolveRepository("kogito-runtimes", "Kevin-Mok", env.BRANCH_NAME, false))
                }
            }
        }
        stage('Prepare for PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                dir("kogito-runtimes") {
                    prepareForPR()
                }
            }
        }
        stage('Update project version'){
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                dir("kogito-runtimes") {
                    script {
                        sh "sed -i -E 's/<version\.org\.kie\.kogito>.*<\/version\.org\.kie\.kogito>/<version.org.kie.kogito>$newVersion<\/version.org.kie.kogito>/' pom.xml"
                        sh "git diff"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join("\n")
                writeFile(text: propertiesStr, file: "deployment.properties")
                archiveArtifacts(artifacts: "deployment.properties")
            }
        }
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void prepareForPR() {
    githubscm.forkRepo(BOT_CREDENTIALS_ID)
    githubscm.createBranch(getProjectVersion())
}

void addNotIgnoredPoms() {
    // based on https://stackoverflow.com/a/59888964/8811872
    sh '''
    find . -type f -name 'pom.xml' > found_poms.txt
    poms_to_add=""
    while IFS= read -r pom; do
        if ! git check-ignore -q "\$pom"; then
            poms_to_add="\$poms_to_add \$pom"
        fi
    done < found_poms.txt
    rm found_poms.txt
    git add \$poms_to_add
    '''
}

void commitAndCreatePR(String repo) {
    def commitMsg = "Update project version to ${getProjectVersion()} for release"

    // Not using githubscm.commitChanges() because globbing won't work.
    // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738
    sh "git config user.name '${env.GIT_COMMITTER_NAME}'"
    sh "git config user.email '${env.GIT_COMMITTER_EMAIL}'"
    addNotIgnoredPoms()
    sh "git commit -m '${commitMsg}'"
    githubscm.pushObject("origin", getProjectVersion(), BOT_CREDENTIALS_ID)
    deployProperties["${repo}.pr.link"] = githubscm.createPR(commitMsg, "master", BOT_CREDENTIALS_ID)
}

boolean isRelease() {
    return params.RELEASE
}

String getBuildBranch(){
    return params.BUILD_BRANCH_NAME
}

String getProjectVersion(){
    return params.PROJECT_VERSION
}

void setDeployPropertyIfNeeded(String key, def value){
    if (value != null && value != ""){
        deployProperties[key] = value
    }
}

