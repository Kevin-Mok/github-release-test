@Library('jenkins-pipeline-shared-libraries')_

RUNTIMES_DEPLOY = "kogito-runtimes-deploy-clone-test"
IMAGES_DEPLOY = "kogito-images-deploy"
OPERATOR_DEPLOY = "kogito-operator-deploy"
RUNTIMES_PROMOTE = "kogito-runtimes-promote"
IMAGES_PROMOTE = "kogito-images-promote"
OPERATOR_PROMOTE = "kogito-operator-promote"

// Map of execute jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

// Should be multibranch pipeline
pipeline {
    agent { label 'kie-rhel7-priority' }

    parameters {
        booleanParam(name: 'SKIP_RUNTIMES', defaultValue: false, description: 'To skip Runtimes Deployment')
        booleanParam(name: 'SKIP_IMAGES', defaultValue: false, description: 'To skip Images Deployment')
        booleanParam(name: 'SKIP_OPERATOR', defaultValue: false, description: 'To skip Operator Deployment')

        booleanParam(name: 'USE_TEMP_OPENSHIFT_REGISTRY', defaultValue: false, description: 'If enabled, use Openshift registry to push temporary images')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')

        MAVEN_REPOSITORY = "https://origin-repository.jboss.org/nexus/content/groups/public/"

        // We use quay as temporary registry for testing between the jobs instead of Openshift, due to https://issues.redhat.com/browse/KOGITO-2219
        IMAGE_REGISTRY_CREDENTIALS = "nightly_kogito"
        IMAGE_REGISTRY = "quay.io"
        IMAGE_NAMESPACE = "kiegroup"
        IMAGE_NAME_SUFFIX = "nightly"
        BUILD_NAME = "${getPRRepoName()}-pr-${env.ghprbPullId}-tests"
        TEMP_TAG = "temp-${env.BUILD_NAME}"

        BRANCH_FOR_LATEST="master"
    }
    options {
        // TODO: to be removed when can setup separate Maven repository for each PR
        disableConcurrentBuilds()
    }

    stages {
        stage("Initialize") {
            steps {
                script {
                    // since this Jenkinsfile is only being used for PR checks
                    assert env.ghprbGhRepository != null
                    echo "temporary tag is ${TEMP_TAG}"
                    /* echo "nightly tag is ${NIGHTLY_TAG}" */

                    currentBuild.displayName = "${BUILD_NAME}"
                }
            }
        }

        stage("Build & Deploy Runtimes") {
            when {
                expression { return !params.SKIP_RUNTIMES }
            }
            steps {
                script {
                    echo "Call ${RUNTIMES_DEPLOY} job"
                    def buildParams = getDefaultBuildParams()
                    addAuthorBranchParamsIfExist(buildParams, getPRRepoName())
                    addStringParam(buildParams, "PR_TARGET_BRANCH", env.ghprbTargetBranch)
                    addStringParam(buildParams, "MAVEN_DEPLOY_REPOSITORY", env.MAVEN_REPOSITORY)
                    
                    // images and operator deploy testing will use older working artifacts if that one fails
                    buildJob(RUNTIMES_DEPLOY, buildParams, false)
                }
            }
        }
    }
}

def buildJob(String jobName, List buildParams, boolean propagate=true){
    def job = build(job: "${jobName}", wait: true, parameters: buildParams, propagate: propagate)
    JOBS[jobName] = job

    // Set Unstable if we don't propagate and job failed
    if(!propagate && job.getResult() != "SUCCESS"){
        unstable("Job ${jobName} finished with result ${job.getResult()}")
    }
    return job
}

def getJob(String jobName){
    return JOBS[jobName]
}

boolean isJobSucceeded(String jobName){
    def job = getJob(jobName)
    return job ? job.getResult() == "SUCCESS" : false
}

void sendNotification(){
    emailext body: "Kogito nightly build #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${RUN_DISPLAY_URL}",
                subject: "Kogito nightly build #${BRANCH_NAME}",
                to: env.KOGITO_CI_EMAIL_TO
}

List getDefaultBuildParams(){
    List params = []
    addStringParam(params, "DISPLAY_NAME", "${BUILD_NAME}")
    addStringParam(params, "BUILD_BRANCH_NAME", "master")
    return params
}

void addImageBuildParams(List buildParams = [], String paramsPrefix = "", String tag, boolean isRegistryIncluded = false, boolean isFinalImage = false){
    if (!isFinalImage && params.USE_TEMP_OPENSHIFT_REGISTRY) {
        addBooleanParam(buildParams, constructKey(paramsPrefix, "IMAGE_USE_OPENSHIFT_REGISTRY"), true)
    } else if(isRegistryIncluded) {
        addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_REGISTRY_CREDENTIALS"), "${IMAGE_REGISTRY_CREDENTIALS}")
        addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_REGISTRY"), "${IMAGE_REGISTRY}")
        addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_NAMESPACE"), "${IMAGE_NAMESPACE}")
    }
    addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_NAME_SUFFIX"), "${IMAGE_NAME_SUFFIX}")
    addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_TAG"), "${tag}")
}

void addStringParam(List params, String key, String value){
    params.add(string(name: key, value: value))
}

void addBooleanParam(List params, String key, boolean value){
    params.add(booleanParam(name: key, value: value))
}

String constructKey(String prefix, String paramId){
    return prefix == null || prefix == '' ? paramId : "${prefix}_${paramId}"
}


String getPRRepoName() {
    return env.ghprbGhRepository.split("/")[1]
}

void addAuthorBranchParamsIfExist(List params, String repo) {
    def repositoryScm = githubscm.getRepositoryScm(repo, env.ghprbPullAuthorLogin, env.ghprbSourceBranch)
    if (repositoryScm != null) {
        addStringParam(params, 'GIT_AUTHOR', env.ghprbPullAuthorLogin)
        addStringParam(params, 'BUILD_BRANCH_NAME', env.ghprbSourceBranch)
    }
}

