import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

changeAuthor = env.ghprbPullAuthorLogin ?: CHANGE_AUTHOR
changeBranch = env.ghprbSourceBranch ?: BRANCH_NAME
changeTarget = env.ghprbTargetBranch ?: CHANGE_TARGET
changeId = env.ghprbPullId ?: CHANGE_ID

// custom/kmok/KOGITO-1031-full
// ../../KIE/kogito/kogito-images-deploy
RUNTIMES_DEPLOY = "kogito-runtimes-deploy"
IMAGES_DEPLOY = "../../KIE/kogito/kogito-images-deploy"
OPERATOR_DEPLOY = "../../KIE/kogito/kogito-operator-deploy"

// Map of execute jobs
// See https://javadoc.jenkins.io/plugin/workflow-support/org/jenkinsci/plugins/workflow/support/steps/build/RunWrapper.html
// for more options on built job entity
JOBS = [:]

pipeline {
    agent {
        label 'kie-rhel7 && !master'
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials('KOGITO_CI_EMAIL_TO')
        MAVEN_REPOSITORY = credentials('PR_CHECK_MAVEN_REPOSITORY')

        // We use quay as temporary registry for testing between the jobs instead of Openshift, due to https://issues.redhat.com/browse/KOGITO-2219
        IMAGE_REGISTRY_CREDENTIALS = "nightly_kogito"
        IMAGE_REGISTRY = "quay.io"
        IMAGE_NAMESPACE = "kiegroup"
        IMAGE_NAME_SUFFIX = "nightly"
        BUILD_NAME = "${getPRRepoName()}-pr-${changeId}-tests"
        TEMP_TAG = "temp-${env.BUILD_NAME}"
    }

    stages {
        stage("Initialize") {
            steps {
                script {
                    // since this Jenkinsfile is only being used for PR checks
                    assert env.ghprbGhRepository != null
                    echo "temporary tag is ${TEMP_TAG}"

                    currentBuild.displayName = "${BUILD_NAME}"
                }
            }
        }

        stage("Build & Deploy Runtimes") {
            steps {
                script {
                    echo "Call ${RUNTIMES_DEPLOY} job"
                    def buildParams = getDefaultBuildParams()
                    addAuthorBranchParamsIfExist(buildParams, getPRRepoName())
                    addStringParam(buildParams, "PR_TARGET_BRANCH", changeTarget)
                    addStringParam(buildParams, "MAVEN_DEPLOY_REPOSITORY", env.MAVEN_REPOSITORY)
                    
                    // images and operator deploy testing will use older working artifacts if that one fails
                    buildJob(RUNTIMES_DEPLOY, buildParams, false)
                }
            }
        }

        stage("Build & Deploy Images") {
            steps {
                script {
                    echo "Call ${IMAGES_DEPLOY} job"

                    def buildParams = getDefaultBuildParams()
                    addAuthorBranchParamsIfExist(buildParams, 'kogito-images')
                    addImageBuildParams(buildParams, "", "${TEMP_TAG}", true, false)
                    addStringParam(buildParams, "MAVEN_ARTIFACT_REPOSITORY", env.MAVEN_REPOSITORY) // Added to be sure to get latest snapshots

                    buildJob(IMAGES_DEPLOY, buildParams, false)
                }
            }
        }

        stage("Build & Deploy Operator") {
            steps {
                script {
                    echo "Call ${OPERATOR_DEPLOY} job"
                    def buildParams = getDefaultBuildParams()
                    addAuthorBranchParamsIfExist(buildParams, 'kogito-cloud-operator')
                    addImageBuildParams(buildParams, "", "${TEMP_TAG}", true, false)

                    // For BDD tests
                    addBooleanParam(buildParams, "KOGITO_IMAGES_IN_OPENSHIFT_REGISTRY", false)
                    addStringParam(buildParams, "KOGITO_IMAGES_REGISTRY", "${IMAGE_REGISTRY}")
                    addStringParam(buildParams, "KOGITO_IMAGES_NAMESPACE", "${IMAGE_NAMESPACE}")
                    addStringParam(buildParams, "KOGITO_IMAGES_NAME_SUFFIX", "${IMAGE_NAME_SUFFIX}")
                    addStringParam(buildParams, "KOGITO_IMAGES_TAG", "${TEMP_TAG}")
                    addExamplesParamsForOperator(buildParams)
                    addStringParam(buildParams, "MAVEN_ARTIFACT_REPOSITORY", env.MAVEN_REPOSITORY) // Added to be sure to get latest snapshots

                    buildJob(OPERATOR_DEPLOY, buildParams, false)
                }
            }
        }

    }
    post {
        failure {
            script {
                mailer.sendEmail_failedPR()
            }
        }
        unstable {
            script {
                mailer.sendEmail_unstablePR()
            }
        }
    }
}

def buildJob(String jobName, List buildParams, boolean propagate=true){
    def job = build(job: "${jobName}", wait: true, parameters: buildParams, propagate: propagate)
    JOBS[jobName] = job

    // Set Unstable if we don't propagate and job failed
    if(!propagate && job.getResult() != "SUCCESS"){
        unstable("Job ${jobName} finished with result ${job.getResult()}")
    }
    return job
}

List getDefaultBuildParams(){
    List params = []
    addStringParam(params, "DISPLAY_NAME", "${BUILD_NAME}")
    addStringParam(params, "BUILD_BRANCH_NAME", "master")
    return params
}

void addImageBuildParams(List buildParams = [], String paramsPrefix = "", String tag, boolean isRegistryIncluded = false, boolean isFinalImage = false){
    if(isRegistryIncluded) {
        addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_REGISTRY_CREDENTIALS"), "${IMAGE_REGISTRY_CREDENTIALS}")
        addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_REGISTRY"), "${IMAGE_REGISTRY}")
        addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_NAMESPACE"), "${IMAGE_NAMESPACE}")
    }
    addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_NAME_SUFFIX"), "${IMAGE_NAME_SUFFIX}")
    addStringParam(buildParams, constructKey(paramsPrefix, "IMAGE_TAG"), "${tag}")
}

void addStringParam(List params, String key, String value){
    params.add(string(name: key, value: value))
}

void addBooleanParam(List params, String key, boolean value){
    params.add(booleanParam(name: key, value: value))
}

String constructKey(String prefix, String paramId){
    return prefix == null || prefix == '' ? paramId : "${prefix}_${paramId}"
}

String getPRRepoName() {
    return env.ghprbGhRepository.split("/")[1]
}

void addAuthorBranchParamsIfExist(List params, String repo) {
    def repositoryScm = githubscm.getRepositoryScm(repo, changeAuthor, changeBranch)
    if (repositoryScm != null) {
        addStringParam(params, 'GIT_AUTHOR', changeAuthor)
        addStringParam(params, 'BUILD_BRANCH_NAME', changeBranch)
    }
}

void addExamplesParamsForOperator(List params) {
    def repositoryScm = githubscm.getRepositoryScm('kogito-examples', changeAuthor, changeBranch)
    addStringParam(params, 'EXAMPLES_REF', (repositoryScm != null) ? changeAuthor : 'kiegroup')
    addStringParam(params, 'EXAMPLES_URI', (repositoryScm != null) ? changeBranch : 'master')
}
