deployProperties = [:]

pipeline {
    agent any
    environment {
        PROPERTIES_FILE_NAME = "deployment.properties"
    }
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: true, description: 'Is this build for a release?')
        string(name: 'DEPLOY_PROPERTIES_URL', defaultValue: 'http://localhost:8090/job/2287/7/artifact/deployment.properties', description: 'Only needed if RELEASE. URL to archived deployment.properties file from deploy pipeline.')
    }
    stages {
        stage('Approve promotion') {
            steps {
                script {
                    /* sh "wget https://pste.gq/raw/re -O ${PROPERTIES_FILE_NAME}" */
                    deployProperties['git.branch'] = "master"
                    deployProperties['project.version'] = "2.41"
                    deployProperties['release'] = "true"
                    deployProperties['kogito-runtimes.pr.link'] = "https://github.com/Kevin-Mok-Bot/kogito-runtimes/pull/1"
                    deployProperties['kogito-apps.pr.link'] = "https://github.com/Kevin-Mok/kogito-apps/pull/2"
                    deployProperties['kogito-examples.pr.link'] = "https://github.com/Kevin-Mok/kogito-examples/pull/1"
                    deployProperties['staging-repo.url'] = "https://rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/custom/job/kmok/job/KOGITO-2415/225/input/"

                    def propertiesStr = deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join("\n")
                    writeFile(text: propertiesStr, file: "deployment.properties")
                    archiveArtifacts(artifacts: "deployment.properties")
                }
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    if (params.DEPLOY_BUILD_URL != null){
        // TODO read and set deployProperties
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ""
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ""){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty("release") == "true")
}

String getProjectVersion() {
    return getParamOrDeployProperty("PROJECT_VERSION", "project.version")
}

String getGitTag() {
    return params.GIT_TAG != "" ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return getParamOrDeployProperty("BUILD_BRANCH_NAME", "git.branch")
}
