pipeline {
    agent any
    environment {
        PROPERTIES_FILE_NAME = "deployment.properties"
    }
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: true, description: 'Is this build for a release?')
        string(name: 'DEPLOY_PROPERTIES_URL', defaultValue: 'http://localhost:8090/job/2287/7/artifact/deployment.properties', description: 'Only needed if RELEASE. URL to archived deployment.properties file from deploy pipeline.')
    }
    stages {
        stage('Approve promotion') {
            steps {
                sh "wget https://pste.gq/raw/re -O ${PROPERTIES_FILE_NAME}"
                archiveArtifacts(artifacts: PROPERTIES_FILE_NAME)
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    if (params.DEPLOY_BUILD_URL != null){
        // TODO read and set deployProperties
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ""
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ""){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty("release") == "true")
}

String getProjectVersion() {
    return getParamOrDeployProperty("PROJECT_VERSION", "project.version")
}

String getGitTag() {
    return params.GIT_TAG != "" ? params.GIT_TAG : getProjectVersion()
}

String getBuildBranch() {
    return getParamOrDeployProperty("BUILD_BRANCH_NAME", "git.branch")
}
