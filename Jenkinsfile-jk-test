@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent { label 'kie-rhel7-priority' }
    /* agent any */
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage('Release') {
            steps {
                script {
                    /* def checkoutBranch = "7.13.2-SNAPSHOT" */
                    def checkoutBranch = "master"
                    def pushBranch = "KOGITO-2415-204"
                    cleanWs()
                    installGithubCLI()
                    dir("jenkins-test") {
                        checkout(githubscm.resolveRepository("jenkins-test", "Kevin-Mok-Bot", checkoutBranch, false))
                        githubscm.createBranch("stable")
                        forcePushProtectedBranch("jenkins-test", "stable", "master")
                        /* setDefaultBranch("jenkins-test", "master") */
                        /* setDefaultBranch("jenkins-test", "stable") */
                    }
                }
            }
        }
    }
}

void installGithubCLI() {
    sh """
    wget https://github.com/cli/cli/releases/download/v0.11.0/gh_0.11.0_linux_amd64.tar.gz
    tar xzf gh_0.11.0_linux_amd64.tar.gz
    mv gh_0.11.0_linux_amd64/bin/gh .
    rm -r gh_0.11.0_linux_amd64*
    """
}

void setDefaultBranch(String repo, String defaultBranch) {
    withCredentials([usernamePassword(credentialsId: "kmok-github-bot", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
        def newDefaultBranch = sh(script: "../gh api -XPATCH 'repos/Kevin-Mok-Bot/${repo}' -f default_branch=${defaultBranch} | jq '.default_branch'", returnStdout: true).trim()
        /* def newDefaultBranch = sh(script: "../gh api -XPATCH 'repos/bad/${repo}' -f default_branch=${defaultBranch} | jq '.default_branch'", returnStdout: true).trim() */
        echo newDefaultBranch
        if (newDefaultBranch == "\"${defaultBranch}\"") {
            echo "[INFO] kiegroup/${repo}'s default branch has been updated to ${newDefaultBranch}."
        } else {
            error "Couldn't update default branch."
        }
    }
}

void forcePushProtectedBranch(String repo, String defaultBranch, String tempBranch) {
    setDefaultBranch(repo, tempBranch)
    withCredentials([usernamePassword(credentialsId: "kmok-github-bot", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
        sh """
        git config --local credential.helper \"!f() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; f\"
        git push --delete origin ${defaultBranch}
        git push origin ${defaultBranch}
        """
    }
    setDefaultBranch(repo, defaultBranch)
}
