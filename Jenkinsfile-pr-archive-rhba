@Library('jenkins-pipeline-shared-libraries-kmok')_

pipeline {
    agent {label 'kogito-cloud && !master'}
    environment {
        NEW_BRANCH = "${JOB_BASE_NAME}-${BUILD_NUMBER}"
        GIT_USER = "Jenkins CI"
        GIT_USER_EMAIL = "jenkins@rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com"
        COMMIT_MSG = "Update Maven version for release"
        CREDENTIALS_ID = "kmok-github-bot"
        PROPERTIES_FILE_NAME = "deployment.properties"
        PROPERTIES_FILE = "${WORKSPACE}/${PROPERTIES_FILE_NAME}"
    }
    stages {
        stage('Clone repositories') { 
            steps {
                dir("github-release-test") {
                    script {
                        checkout(githubscm.resolveRepository("github-release-test", "Kevin-Mok-Bot", "master", false))
                        githubscm.createBranch("${NEW_BRANCH}")
                        sh "printf \"${BUILD_TAG}\n\" >> README.md"
                        githubscm.commitChanges("${GIT_USER}", "${GIT_USER_EMAIL}", "${COMMIT_MSG}")
                        githubscm.pushObject("origin", "${NEW_BRANCH}", "${CREDENTIALS_ID}")
                        def prLink = githubscm.createPR("${COMMIT_MSG}", "master", "${CREDENTIALS_ID}")
                        /* sh "echo ${prLink}" */
                        sh "printf \"github-release-test.pr=%s\n\" \"${prLink}\" > ${PROPERTIES_FILE}"
                    }
                }
            }
        }
        stage('Archive staging repository URL') {
            steps {
                script {
                    def STAGING_REPO_URL = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                    sh "printf \"staging-repo.url=%s\" \"${STAGING_REPO_URL}\" >> ${PROPERTIES_FILE}"
                    archiveArtifacts(artifacts: "${PROPERTIES_FILE_NAME}")
                }
            }
        }
    }
}
