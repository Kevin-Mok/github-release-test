@Library('jenkins-pipeline-shared-libraries-kmok')_

def deployProperties = [:]

pipeline {
    agent {label 'kogito-cloud && !master'}
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: true, description: 'Is this build for a release?')
        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')
    }
    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
        NEW_BRANCH = "${JOB_BASE_NAME}-${BUILD_NUMBER}"
        GIT_USER = "Jenkins CI"
        GIT_USER_EMAIL = "jenkins@rhba-jenkins.rhev-ci-vms.eng.rdu2.redhat.com"
        COMMIT_MSG = "Update Maven version for release"
        CREDENTIALS_ID = "kmok-github-bot"
        PROPERTIES_FILE_NAME = "deployment.properties"
        PROPERTIES_FILE = "${WORKSPACE}/${PROPERTIES_FILE_NAME}"
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    stages {
        stage('Clone repositories') { 
            steps {
                dir("kogito-runtimes") {
                    checkout(githubscm.resolveRepository("kogito-runtimes", "Kevin-Mok-Bot", "master", false))
                }
                dir("kogito-apps") {
                    checkout(githubscm.resolveRepository("kogito-apps", "Kevin-Mok-Bot", "master", false))
                }
                dir("kogito-examples") {
                    checkout(githubscm.resolveRepository("kogito-examples", "Kevin-Mok-Bot", "master", false))
                }
                // Use a separate dir for persistence to not overwrite the test results
                sh "cp -r kogito-examples kogito-examples-persistence"
            }
        }
        stage('Prepare Maven settings'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
                    sh "echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee kogito-{runtimes,apps,examples,examples-persistence}/.mvn/maven.config"
                }
                dir("kogito-runtimes") {
                    script {
                        maven.updateMavenVersion(params.MAVEN_VERSION)
                    }
                }
                dir("kogito-examples") {
                    script {
                        maven.updateMavenVersion(params.MAVEN_VERSION)
                    }
                }
                dir("kogito-examples-persistence") {
                    script {
                        maven.updateMavenVersion(params.MAVEN_VERSION)
                    }
                }
            }
        }
        stage('Build kogito-runtimes') {
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Build kogito-apps') {
            steps {
                dir("kogito-apps") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Build kogito-examples with persistence') {
            steps {
                dir("kogito-examples-persistence") {
                    script {
                        // Don't run with tests so far, see: https://github.com/quarkusio/quarkus/issues/6885
                        maven.runMavenWithSubmarineSettings('clean install -Ppersistence', true)
                    }
                }
            }
        }
        stage('Create PR'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                dir("kogito-runtimes") {
                    script {
                        githubscm.createBranch(NEW_BRANCH)
                        githubscm.commitChanges(GIT_USER, GIT_USER_EMAIL, COMMIT_MSG, "pom.xml")
                        githubscm.pushObject("origin", NEW_BRANCH, CREDENTIALS_ID)
                        deployProperties["kogito-runtimes.pr"] = githubscm.createPR(COMMIT_MSG, "master", CREDENTIALS_ID)
                    }
                }
                dir("kogito-examples") {
                    script {
                        githubscm.createBranch(NEW_BRANCH)
                        githubscm.commitChanges(GIT_USER, GIT_USER_EMAIL, COMMIT_MSG, "pom.xml")
                        githubscm.pushObject("origin", NEW_BRANCH, CREDENTIALS_ID)
                        deployProperties["kogito-examples.pr"] = githubscm.createPR(COMMIT_MSG, "master", CREDENTIALS_ID)
                    }
                }
            }
        }
        stage('Deploy artifacts') {
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
                dir("kogito-apps") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
            }
        }
        stage('Archive staging repository URL') {
            when {
                expression { return params.RELEASE }
            }
            steps {
                script {
                    deployProperties["staging-repo.url"] = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                }
            }
        }
    }
    post {
        always {
            junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: true
            script {
                if (params.RELEASE) {
                    def propertiesStr = ""
                    for(entry in deployProperties) {
                        propertiesStr = "${propertiesStr}${entry.key}=${entry.value}\n"
                    }
                    writeFile(text: propertiesStr, file: PROPERTIES_FILE)
                    archiveArtifacts(artifacts: PROPERTIES_FILE_NAME)
                }
            }
        }
    }
}
