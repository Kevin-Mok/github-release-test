@Library('jenkins-pipeline-shared-libraries')_

deployProperties = [:]
BOT_CREDENTIALS_ID = "kmok-github-bot"

pipeline {
    agent { label 'kie-rhel7-priority' }
    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build? Set if you are not on a multibranch pipeline.')
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Optional if not RELEASE. If RELEASE, cannot be empty.')
    }
    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
        timeout(time: 120, unit: 'MINUTES')
    }
    stages {
        stage("Initialize") {
            steps {
                script {
                    cleanWs()
                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (env.BRANCH_NAME != "") {
                        // Switch to branch if not on a multibranch pipeline
                        env.BRANCH_NAME = getBuildBranch()
                    }
                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }
                    setDeployPropertyIfNeeded('git.branch', getBuildBranch())
                    setDeployPropertyIfNeeded('project.version', getProjectVersion())
                    setDeployPropertyIfNeeded('release', isRelease())
                }
            }
        }
        stage('Clone repositories') { 
            steps {
                dir("kogito-runtimes") {
                    checkout(githubscm.resolveRepository("kogito-runtimes", "Kevin-Mok", env.BRANCH_NAME, false))
                }
            }
        }
        stage('Prepare for PR'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                dir("kogito-runtimes") {
                    prepareForPR()
                }
            }
        }
        stage('Setup Maven release config'){
            when {
                expression { return isRelease() }
            }
            steps {
                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
                    sh "echo '-B -s ${MAVEN_SETTINGS_FILE}' | tee kogito-runtimes/.mvn/maven.config"
                }
            }
        }
        stage('Update project version'){
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                dir("kogito-runtimes") {
                    script {
                        maven.mvnVersionsSet(getProjectVersion())
                    }
                }
            }
        }
        stage('Create PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                dir("kogito-runtimes") {
                    script {
                        commitAndCreatePR("kogito-runtimes")
                    }
                }
            }
        }
        stage('Get staging repository URL') {
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    def pipelineName = "Test (kmok) - Kogito Runtimes deploy pipeline"
                    /* withCredentials([string(credentialsId: "KOGITO_CI_EMAIL_TO", variable: 'ZULIP_EMAIL')]) {
                        emailext body: "${pipelineName} #${env.BUILD_NUMBER} is ready for release and needs a staging repository URL: ${env.BUILD_URL}input",
                                 subject: "${pipelineName} #${getBuildBranch()}",
                                 to: ZULIP_EMAIL
                    } */
                    deployProperties["staging-repo.url"] = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join("\n")
                writeFile(text: propertiesStr, file: "deployment.properties")
                archiveArtifacts(artifacts: "deployment.properties")
            }
        }
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void prepareForPR() {
    githubscm.forkRepo(BOT_CREDENTIALS_ID)
    githubscm.createBranch(getProjectVersion())
}

void commitAndCreatePR(String repo) {
    def commitMsg = "Update project version to ${getProjectVersion()} for release"

    // Not using githubscm.commitChanges() because globbing won't work.
    // See: https://github.com/kiegroup/kogito-runtimes/pull/570#discussion_r449268738
    sh "git config user.name '${env.GIT_COMMITTER_NAME}'"
    sh "git config user.email '${env.GIT_COMMITTER_EMAIL}'"
    sh "git add \$(find . -type f -name 'pom.xml')"
    sh "git commit -m '${commitMsg}'"
    githubscm.pushObject("origin", getProjectVersion(), BOT_CREDENTIALS_ID)
    deployProperties["${repo}.pr.link"] = githubscm.createPR(commitMsg, "master", BOT_CREDENTIALS_ID)
}

boolean isRelease() {
    return params.RELEASE
}

String getBuildBranch(){
    return params.BUILD_BRANCH_NAME
}

String getProjectVersion(){
    return params.PROJECT_VERSION
}

String getCommitMessage(){
    return "Update project version to ${getProjectVersion()} for release"
}

void setDeployPropertyIfNeeded(String key, def value){
    if (value != null && value != ""){
        deployProperties[key] = value
    }
}

