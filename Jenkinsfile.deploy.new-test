@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {label 'kogito-cloud-image && !master'}
    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this build for a release?')
        string(name: 'MAVEN_VERSION', defaultValue: '3.6.2', description: 'Only used if RELEASE.')
    }
    environment {
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
    }
    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    stages {
        stage('Clone repositories') { 
            steps {
                dir("kogito-examples") {
                    checkout(githubscm.resolveRepository("kogito-examples", "kiegroup", env.BRANCH_NAME, false))
                }
            }
        }
        stage('Prepare Maven settings'){
            when {
                expression { return params.RELEASE }
            }
            steps {
                configFileProvider([configFile(fileId: '771ff52a-a8b4-40e6-9b22-d54c7314aa1e', targetLocation: 'maven-settings.xml', variable: 'MAVEN_SETTINGS_FILE')]){
                    sh "echo '-B -s $MAVEN_SETTINGS_FILE' | tee kogito-{runtimes,apps,examples,examples-persistence}/.mvn/maven.config"
                }
                dir("kogito-examples") {
                    script {
                        maven.updateMavenVersion(params.MAVEN_VERSION)
                    }
                }
            }
        }
        stage('Build kogito-examples') {
            steps {
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean install', false)
                    }
                }
            }
        }
        stage('Deploy artifacts') {
            steps {
                dir("kogito-examples") {
                    script {
                        maven.runMavenWithSubmarineSettings('clean deploy', true)
                    }
                }
            }
        }
        stage('Archive staging repository URL') {
            steps {
                script {
                    if (params.RELEASE) {
                        def STAGING_REPO_URL = input(message: "Enter staging repository URL:", parameters: [string(name: 'STAGING_REPO_URL')])
                        def PROPERTIES_FILE = "deployment.properties"
                        sh "printf \"staging-repo.url=%s\" \"${STAGING_REPO_URL}\" > ${PROPERTIES_FILE}"
                        archiveArtifacts(artifacts: "${PROPERTIES_FILE}")
                    }
                }
            }
        }
    }
    post {
        always {
            junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
        }
    }
}
